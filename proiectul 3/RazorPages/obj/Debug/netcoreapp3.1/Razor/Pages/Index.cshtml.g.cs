#pragma checksum "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4ab248eed5184d4a6c0552c7f1221cce3e5faa69"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(RazorPages.Pages.Pages_Index), @"mvc.1.0.razor-page", @"/Pages/Index.cshtml")]
namespace RazorPages.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\_ViewImports.cshtml"
using RazorPages;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4ab248eed5184d4a6c0552c7f1221cce3e5faa69", @"/Pages/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2a5af01c9da6f6fc9790fe8f4f6964fd29c12eba", @"/Pages/_ViewImports.cshtml")]
    public class Pages_Index : global::Microsoft.AspNetCore.Mvc.RazorPages.Page
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 3 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
  
    ViewData["Title"] = "Home page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""text-center"">
    <h1 class=""display-4"">Toata baza de date</h1>
    
</div>

<table class=""table"" id=""myTable2"">
    <thead>
        <tr>
            <th onclick=""sortTablePath(0)"">
                Adresa
            </th>
            <th onclick=""sortTablePath(1)"">
                Persoana
            </th>
            <th onclick=""sortTablePath(0)"">
                Eveniment
            </th>
            <th onclick=""sortTablePath(0)"">
                Peisaj
            </th>
            <th onclick=""sortTablePath(0)"">
                Loc
            </th>
            <th onclick=""sortTablePath(0)"">
                Altele
            </th>
            <th>
                DataCreare
            </th>


        </tr>
    </thead>
    <tbody>
");
#nullable restore
#line 41 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
         foreach (var item in Model.MediaDTO)
        {

#line default
#line hidden
#nullable disable
            WriteLiteral("            <tr>\r\n                <td>\r\n                    ");
#nullable restore
#line 45 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Path));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n\r\n                <td>\r\n                    ");
#nullable restore
#line 49 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Persoane));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 52 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Evenimente));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 55 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Peisaje));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 58 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Locuri));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 61 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.Altele));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n                <td>\r\n                    ");
#nullable restore
#line 64 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
               Write(Html.DisplayFor(modelItem => item.DataCreare));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n                </td>\r\n\r\n\r\n\r\n\r\n               \r\n            </tr>\r\n");
#nullable restore
#line 72 "C:\Users\Utilizator 5\Desktop\1_P3_Mi12\Proiect 3\RazorPages\Pages\Index.cshtml"
        }

#line default
#line hidden
#nullable disable
            WriteLiteral("    </tbody>\r\n</table>\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script type=""text/javascript"">
        function sortTablePath(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById(""myTable2"");
            switching = true;
            dir = ""asc"";

            while (switching) {
                switching = false;
                rows = table.rows;
                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName(""TD"")[n];
                    y = rows[i + 1].getElementsByTagName(""TD"")[n];

                    if (dir == ""asc"") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == ""desc"") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            s");
                WriteLiteral(@"houldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;

                    switchcount++;
                } else {

                    if (switchcount == 0 && dir == ""asc"") {
                        dir = ""desc"";
                        switching = true;
                    }
                }
            }
        }

        function sortTableCheck(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById(""myTable2"");
            switching = true;
            dir = ""asc"";

            while (switching) {
                switching = false;
                rows = table.rows;
                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                   ");
                WriteLiteral(@" x = rows[i].getElementsByTagName(""TD"")[n];
                    y = rows[i + 1].getElementsByTagName(""TD"")[n];

                    if (dir == ""asc"") {
                        if (Number(x.innerHTML) > Number(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == ""desc"") {
                        if (Number(x.innerHTML) < Number(y.innerHTML)) {
                            shouldSwitch = true;
                            break;
                        }
                    }

                }
                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;

                    switchcount++;
                }
                else {

                    if (switchcount == 0 && dir == ""asc"") {
                        dir = ""desc"";
                        switching = true;
                    }
");
                WriteLiteral("                }\r\n            }\r\n        }\r\n\r\n       \r\n    </script>\r\n");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RazorPages.Pages.Medias.IndexModel> Html { get; private set; }
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RazorPages.Pages.Medias.IndexModel> ViewData => (global::Microsoft.AspNetCore.Mvc.ViewFeatures.ViewDataDictionary<RazorPages.Pages.Medias.IndexModel>)PageContext?.ViewData;
        public RazorPages.Pages.Medias.IndexModel Model => ViewData.Model;
    }
}
#pragma warning restore 1591
